{
	// Specify common flags that will be passed to clang for EVERY build.
	// You can use wilcards:
	// 	- $project_base_path -> will be replaced with the project path being built
	// 	- $project_name -> replaced by name of the project being built
	// 	- $clang_version -> replaced by the numeric version of clang in use
	"common_flags" : [
		// some example includes
		"-isystem /usr/include",
		"-I$project_base_path/src",
		"-I/workspace/$project_name/src",
		"-I/usr/lib/clang/$clang_version/include"
	],
	// C specific flags. Merged with common_flags for C files.
	"c_flags" : [
		"-std=c11"
	],
	// C++ specific flags. These are merged with common_flags for C++ files.
	"cpp_flags" : [
		"-std=c++11"
	],

	// search for .clang_complete file up the tree. Use flags from it if found
	"search_clang_complete_file": true,

	// search for CMakeLists.txt with a "project" command in it. Run cmake on this
	// file from temporary folder to generate compilation database. Update
	// .clang_complete file with these generated flags.
	"generate_flags_with_cmake": true,

	// what to do if old flags were found in .clang_complete file?
	// can be one of the following:
	// 		- "ask": ask the user every time we need to overwite .clang_complete
	// 		- "merge": merge all together, ignore dublicates
	// 		- "overwrite": overwrite whatever is already in the file
	// 		- "keep_old": ignore flags from cmake, keep old one instead
	"cmake_flags_priority": "ask",

	// add these to CMAKE_PREFIX_PATH. Needed if you have an esoteric build system
	"cmake_prefix_paths": [
			"~/relative/path",
			"/absolute/path"],

	// show compile errors on save
	"errors_on_save": true,

	// triggers for auto-completion
	"triggers" : [ ".", "->", "::"],

	// use libclang. If set to false will use clang_binary and parse the output of
	// `clang_binary -Xclang -code-complete-at...` instead.
	"use_libclang" : true,

	// make plugin verbose
	"verbose" : false,

	// add folder with current file with `-I` flag
	"include_file_folder" : true,

	// add parent folder of the current file's one with `-I` flag
	"include_file_parent_folder" : true,

	// pick the clang binary used by the plugin. This is used to determine the
	// version of the plugin and pick correct libclang bindings.
	"clang_binary" : "clang++",

	// ignore triggers and try to complete after each character
	// WARNING: can be very slow
	"autocomplete_all" : false,

	// hide the completions generated by other plugins
	"hide_default_completions": false,

	// when using libclang temporary compilation data is stored. Remove
	// translation units older than specified time.
	// Format: <hours>:<minutes>:<seconds>: "HH:MM:SS".
	"max_tu_age": "00:30:00",
}
